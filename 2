Each new term in the Fibonacci sequence is generated
by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence
whose values do not exceed four million, find the sum of the even-valued terms.

user> (defn fibo [] (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))
#'user/fibo
user> (take 10 (fibo))
(0 1 1 2 3 5 8 13 21 34)
user> (reduce + (filter even? (take-while #(> 4000000 %) (fibo))))
4613732


(ns euler002
  (:use [util.fibonacci]))

(defn solve []
  (->> fib-seq
       (filter even?)
       (take-while #(< % 4000000))
       (reduce +)))

(ns util.fibonacci
  (:use [util.misc]))

(def fibonacci-seq
  (letfn [(seq0 [a b] (lazy-seq (cons a (seq0 b (+ a b)))))]
    (seq0 1N 1N)))

(def tribonacci-seq
  "The tribonacci numbers are like the Fibonacci numbers, but instead of 
   starting with two predetermined terms, the sequence starts with three
   predetermined terms and each term afterwards is the sum of the preceding
   three terms."
  (letfn [(seq0 [a b c] (lazy-seq (cons a (seq0 b c (+ a b c)))))]
    (seq0 1N 1N 1N)))

(def golden-ratio 
  (/ (inc (Math/sqrt 5)) 2))

(defn fib [n]
  (bigint (+
            (/ 
              (iexpt (bigdec golden-ratio) n)
              (Math/sqrt 5))
            0.5)))
(ns util.misc
  (:use [util.primes]))

(def integers (iterate inc 1))

(def squares (->> integers (filter odd?) (reductions +)))

(defn is-square? [n]
  (let [sqrt (Math/sqrt n)]
    (== sqrt (int sqrt))))

(defn triangle [^long n] (quot (* n (inc n)) 2))

(defn square [^long n] (* n n))

(defn pentagon [^long n] (quot (* n (dec (* 3 n))) 2))

(defn hexagon [^long n] (* n (dec (* 2 n))))

(defn heptagon [^long n] (quot (* n (- (* 5 n) 3)) 2))

(defn octagon [^long n] (* n (- (* 3 n) 2)))

(defn number-seq [f] (map f integers))

(def triangle-numbers (reductions + integers))

(def hexagonal-numbers (take-nth 2 triangle-numbers))

(defn centred-hexagon [n] (inc (* 3 n (dec n))))

(def centred-hexagonal-numbers (map centred-hexagon integers))

(defn triangle-root [^long n]
  (/ (dec (Math/sqrt (inc (* 8 n)))) 2))

(defn is-triangular? [^long n]
  (let [root (triangle-root n)]
    (== root (int root))))

(defn is-pentagonal? [^long x]
  (let [n (/ (inc (Math/sqrt (inc (* 24 x)))) 6)]
    (== n (int n))))

(defn to-number 
  "Convert a collection of digits to a number"
  ([xs] (to-number xs 10))
  ([xs ^long radix]
    (let [index (cons 1 (reductions * (repeat radix)))]
      (reduce + (map * index (reverse xs))))))

(defn char-to-int [c]
  (- (int c) 48))

;(defn digits [n]
;  (map char-to-int (str n)))

(defn digits 
  ([n] (digits n 10))
  ([n ^long radix]
    (loop [n n
           res nil]
      (if (zero? n)
        res
        (recur 
          (quot n radix)
          (cons (rem n radix) res))))))
 
(defn iexpt [x ^long exp]
  "Raise x to an integer exponent, of the form x^exp"
  (reduce * (repeat exp x)))


(def factorial-seq
  (cons 1N ; the value of 0! is 1, according to the convention for an empty product.
    (->> (iterate inc 1)
         (map bigint)
         (reductions *))))

(def factorial
  (memoize
    (fn [n]
      (first (drop n factorial-seq)))))

(defn sum-of [func ^long n]
  (->> (digits n)
       (map func)
       (reduce +)))

(defn abs [^long n]
  "The absolute value of n"
  (if (neg? n) (- n) n))

(def divisors
  (memoize
    (fn [^long n]
      (let [f (fn [^long d xs]
                  (cond
                    (<= d 1)          (cons 1 xs) 
                    (zero? (rem n d)) (recur (dec d) (cons d xs))
                    :else             (recur (dec d) xs)))]
          (f (inc (quot n 2)) (list n))))))

(defn count-divisors [n]
  (->> (prime-factors-of n)
       frequencies
       vals
       (map inc)
       (reduce *)))

(defn smallest-dividee [num-divisors]
  (let [f (fn [a b] (iexpt a (dec b)))]
    (reduce * (map f primes (reverse (prime-factors-of num-divisors))))))

(defmacro fmt [^String string]
  (let [-re #"#\{(.*?)\}"
        fstr (clojure.string/replace string -re "%s")
        fargs (map #(read-string (second %)) (re-seq -re string))]
    `(format ~fstr ~@fargs)))

(defn sigma [k n]
  (letfn [(term [entry]
            (let [p (key entry)
                  e (val entry)]
              (cond 
                (= n 1)   1
                (zero? k) (inc e) 
                :else     (quot 
                            (dec (iexpt p (* (inc e) k))) 
                            (dec (iexpt p k))))))]
    (->> (prime-factors-of n) frequencies (map term) (reduce *))))

(defn aliquot-sum [n]
  (- (sigma 1 n) n))


(ns util.primes)

(defn gcd 
  "Euclid's algorithm, is an efficient method for computing the greatest
   common divisor (GCD) of two integers, also known as the greatest common
   factor (GCF) or highest common factor (HCF). It is named after the Greek
   mathematician Euclid, who described it in Books VII and X of his Elements."
  [^long a ^long b] 
  (if (zero? b) a (recur b (long (mod a b)))))

(defn lcm 
  "The least common multiple (also called the lowest common multiple or 
   smallest common multiple) of two integers a and b, usually denoted by
   LCM(a, b), is the smallest positive integer that is divisible by both
   a and b. If either a or b is 0, LCM(a, b) is defined to be zero."
  [^long a ^long b] 
  (quot (* a b) (gcd a b)))

(defn coprime? 
  "Two integers a and b are said to be coprime or relatively prime if
   the only positive integer that evenly divides both of them is 1."
  [^long a ^long b]
  (= 1 (gcd a b)))

(def is-prime?
  (memoize
    (fn [^long n] 
        (cond
          (<= n 1) false
          (=  n 2) true
          :else    (let [r (range 2 (inc (Math/sqrt n)))]
                     (every? false? (map #(zero? (rem n %)) r)))))))

(def primes
  (concat 
   [2 3 5 7]
   (lazy-seq
    (let [primes-from
      (fn primes-from [n [f & r]]
        (if (some #(zero? (rem n %))
                  (take-while #(<= (* % %) n) primes))
          (recur (+ n f) r)
          (lazy-seq (cons n (primes-from (+ n f) r)))))
      wheel (cycle [2 4 2 4 6 2 6 4 2 4 6 6 2 6  4  2
                    6 4 6 8 4 2 4 2 4 8 6 4 6 2  4  6
                    2 6 6 4 2 4 6 2 6 4 2 4 2 10 2 10])]
      (primes-from 11 wheel)))))

(defn prime-factors-of [^long n]
  (let [q (long (Math/sqrt n))]
    (loop [n n
           p primes
           res nil]
      (let [d (long (first p))]
        (cond
          (or (> d q) (= n d)) (cons n res)
          (zero? (rem n d))    (recur (quot n d) p (cons d res))
          :else                (recur n (next p) res))))))

(def composites 
  (remove is-prime? (iterate inc 2)))

(defn primes-after [n]
  (let [next-prime (.nextProbablePrime (BigInteger/valueOf n))]
    (cons next-prime (lazy-seq (primes-after next-prime)))))

(defn primes-range [x y]
  (->> primes
       (drop-while #(< % x))
       (take-while #(<= % y))))

(defn quadratfrei? 
  "A number is said to be squarefree (or sometimes quadratfrei; Shanks 1993)
   if its prime decomposition contains no repeated factors. All primes are 
   therefore trivially squarefree. The number 1 is by convention taken to be
   squarefree. The squarefree numbers are 1, 2, 3, 5, 6, 7, 10, 11, 13, 14,
   15, ... (Sloane's A005117). The squareful numbers (i.e., those that 
   contain at least one square) are 4, 8, 9, 12, 16, 18, 20, 24, 25, ... 
   (Sloane's A013929)."
  [n]
  (->> (prime-factors-of n)
       frequencies
       (every? #(= (second %) 1))))

(defn phi 
  "Euler's totient or phi function, φ(n) is an arithmetic function that
   counts the number of positive integers less than or equal to n that 
   are relatively prime to n. That is, if n is a positive integer, then 
   φ(n) is the number of integers k in the range 1 ≤ k ≤ n for which 
   gcd(n, k) = 1"
  [^long n]
  (->> (prime-factors-of n)
       distinct
       (map #(- 1 (/ 1 %))) 
       (reduce * n)
       long))
